<?php

namespace App\Services;

use App\Models\Payment;
use Illuminate\Support\Facades\Http;
use Illuminate\Support\Facades\Log;
use Exception;

class ReddePaymentService
{
    protected string $apiKey;
    protected string $appId;
    protected string $nickname;
    protected string $baseUrl;
    protected array $endpoints;
    protected int $timeout;

    public function __construct()
    {
        $this->apiKey = config('redde.api_key');
        $this->appId = config('redde.app_id');
        $this->nickname = config('redde.nickname');
        $this->baseUrl = config('redde.base_url');
        $this->endpoints = config('redde.endpoints');
        $this->timeout = config('redde.timeout', 30);

        if (empty($this->apiKey) || empty($this->appId)) {
            throw new Exception('Redde API credentials not configured. Please set REDDE_API_KEY and REDDE_APP_ID in your environment.');
        }
    }

    /**
     * Process payment from customer (customer pays merchant)
     */
    public function receive(array $paymentData): array
    {
        $payload = $this->buildReceivePayload($paymentData);

        try {
            $response = $this->makeApiRequest('receive', $payload);

            return [
                'success' => true,
                'transaction_id' => $response['transactionid'] ?? null,
                'client_transaction_id' => $payload['clienttransid'],
                'status' => $response['status'] ?? 'UNKNOWN',
                'message' => $response['reason'] ?? 'Payment initiated successfully',
                'response' => $response,
                'payload' => $payload,
            ];

        } catch (Exception $e) {
            Log::error('Redde receive payment failed', [
                'payload' => $this->sanitizeLogData($payload),
                'error' => $e->getMessage(),
            ]);

            return [
                'success' => false,
                'error' => $e->getMessage(),
                'client_transaction_id' => $payload['clienttransid'],
                'payload' => $payload,
            ];
        }
    }

    /**
     * Send money to customer (merchant pays customer)
     */
    public function cashout(array $paymentData): array
    {
        $payload = $this->buildCashoutPayload($paymentData);

        try {
            $response = $this->makeApiRequest('cashout', $payload);

            return [
                'success' => true,
                'transaction_id' => $response['transactionid'] ?? null,
                'client_transaction_id' => $payload['clienttransid'],
                'status' => $response['status'] ?? 'UNKNOWN',
                'message' => $response['reason'] ?? 'Cashout initiated successfully',
                'response' => $response,
                'payload' => $payload,
            ];

        } catch (Exception $e) {
            Log::error('Redde cashout payment failed', [
                'payload' => $this->sanitizeLogData($payload),
                'error' => $e->getMessage(),
            ]);

            return [
                'success' => false,
                'error' => $e->getMessage(),
                'client_transaction_id' => $payload['clienttransid'],
                'payload' => $payload,
            ];
        }
    }

    /**
     * Check transaction status
     */
    public function checkStatus(string $transactionId): array
    {
        try {
            $url = $this->baseUrl . $this->endpoints['status'] . '/' . $transactionId;

            $response = Http::timeout($this->timeout)
                ->withHeaders([
                    'ApiKey' => $this->apiKey,
                    'AppId' => $this->appId,
                    'Content-Type' => 'application/json',
                ])
                ->get($url);

            error_log(json_encode($response->json()));

            if ($response->successful()) {
                $data = $response->json();

                $this->logResponse('status_check', $data);

                return [
                    'success' => true,
                    'status' => $data['status'] ?? 'UNKNOWN',
                    'reason' => $data['reason'] ?? '',
                    'transaction_id' => $data['transactionid'] ?? $transactionId,
                    'client_transaction_id' => $data['clienttransid'] ?? '',
                    'telco_transaction_id' => $data['brandtransid'] ?? null,
                    'status_date' => $data['statusdate'] ?? null,
                    'response' => $data,
                ];
            } else {
                throw new Exception('Failed to check transaction status: ' . $response->body());
            }

        } catch (Exception $e) {
            Log::error('Redde status check failed', [
                'transaction_id' => $transactionId,
                'error' => $e->getMessage(),
            ]);

            return [
                'success' => false,
                'error' => $e->getMessage(),
                'transaction_id' => $transactionId,
            ];
        }
    }

    /**
     * Build payload for receive (customer payment) request
     */
    protected function buildReceivePayload(array $data): array
    {
        $payload = [
            'amount' => round($data['amount'], 2),
            'appid' => $this->appId,
            'clientreference' => $data['reference'] ?? $this->generateReference(),
            'clienttransid' => $data['client_transaction_id'] ?? $this->generateClientTransactionId(),
            'description' => $data['description'] ?? 'Payment for subscription',
            'vouchercode' => $data['vouchercode'] ,
            'nickname' => $this->nickname,
            'paymentoption' => strtoupper($data['payment_option']),
            'walletnumber' => $data['phone_number'],
        ];

        // Add voucher code if provided (for VODAFONE/TELECEL payments)
        if (isset($data['voucher_code']) && !empty($data['voucher_code'])) {
            $payload['vouchercode'] = $data['voucher_code'];
        }

        return $payload;
    }

    /**
     * Build payload for cashout (merchant payment) request
     */
    protected function buildCashoutPayload(array $data): array
    {
        return [
            'amount' => round($data['amount'], 2),
            'appid' => $this->appId,
            'clientreference' => $data['reference'] ?? $this->generateReference(),
            'clienttransid' => $data['client_transaction_id'] ?? $this->generateClientTransactionId(),
            'description' => $data['description'] ?? 'Refund payment',
            'nickname' => $this->nickname,
            'paymentoption' => strtoupper($data['payment_option']),
            'walletnumber' => $data['phone_number'],
        ];
    }

    /**
     * Make API request to Redde
     */
    protected function makeApiRequest(string $endpoint, array $payload): array
    {
        $url = $this->baseUrl . $this->endpoints[$endpoint];


        error_log(json_encode($payload));
        $this->logRequest($endpoint, $payload);
        $response = Http::timeout($this->timeout)
            ->withHeaders([
                'ApiKey' => $this->apiKey,
                'Content-Type' => 'application/json',
            ])
            ->post($url, $payload);
        Log::info("$url");
        Log::info(json_encode($payload));
        if ($response->successful()) {
            $data = $response->json();
            $this->logResponse($endpoint, $data);
            return $data;
        } else {
            $error = "Redde API request failed: {$response->status()} - {$response->body()}";
            Log::error($error, [
                'endpoint' => $endpoint,
                'payload' => $payload,
                'response_status' => $response->status(),
                'response_body' => $response->body(),
            ]);
            throw new Exception($error);
        }
    }

    /**
     * Generate unique client transaction ID
     */
    protected function generateClientTransactionId(): string
    {
        return 'MKRTK_' . time() . '_' . random_int(1000, 9999);
    }

    /**
     * Generate unique reference
     */
    protected function generateReference(): string
    {
        return 'REF_' . time() . '_' . random_int(100000, 999999);
    }

    /**
     * Log API request
     */
    protected function logRequest(string $endpoint, array $payload): void
    {
        if (config('redde.log_requests', true)) {
            Log::info("Redde API Request - {$endpoint}", [
                'endpoint' => $endpoint,
                'payload' => $this->sanitizeLogData($payload),
            ]);
        }
    }

    /**
     * Log API response
     */
    protected function logResponse(string $endpoint, array $response): void
    {
        if (config('redde.log_responses', true)) {
            Log::info("Redde API Response - {$endpoint}", [
                'endpoint' => $endpoint,
                'response' => $response,
            ]);
        }
    }

    /**
     * Sanitize sensitive data for logging
     */
    protected function sanitizeLogData(array $data): array
    {
        $sensitiveFields = ['walletnumber'];
        $sanitized = $data;

        foreach ($sensitiveFields as $field) {
            if (isset($sanitized[$field])) {
                $sanitized[$field] = substr($sanitized[$field], 0, 3) . '****' . substr($sanitized[$field], -3);
            }
        }

        return $sanitized;
    }

    /**
     * Get supported payment options
     */
    public function getPaymentOptions(): array
    {
        return config('redde.payment_options', []);
    }

    /**
     * Validate phone number format for Ghana
     */
    public function validatePhoneNumber(string $phoneNumber): bool
    {
        // Remove any spaces or special characters
        $cleaned = preg_replace('/[^0-9]/', '', $phoneNumber);

        // Check if it starts with country code or not
        if (strlen($cleaned) === 10 && str_starts_with($cleaned, '0')) {
            // Convert 0XX format to 233XX format
            $cleaned = '233' . substr($cleaned, 1);
        }

        // Should be 12 digits starting with 233
        return strlen($cleaned) === 12 && str_starts_with($cleaned, '233');
    }

    /**
     * Format phone number for Ghana
     */
    public function formatPhoneNumber(string $phoneNumber): string
    {
        $cleaned = preg_replace('/[^0-9]/', '', $phoneNumber);

        if (strlen($cleaned) === 10 && str_starts_with($cleaned, '0')) {
            return '233' . substr($cleaned, 1);
        }

        return $cleaned;
    }

    /**
     * Map Redde status to internal status
     */
    public function mapStatus(string $reddeStatus): string
    {
        return config('redde.status_mapping')[$reddeStatus] ?? 'unknown';
    }

    /**
     * Process payment callback from Redde
     */
    public function processCallback(array $callbackData): array
    {
        Log::info('Redde callback received', $callbackData);

        $status = $this->mapStatus($callbackData['status'] ?? 'UNKNOWN');

        return [
            'transaction_id' => $callbackData['transactionid'] ?? null,
            'client_transaction_id' => $callbackData['clienttransid'] ?? null,
            'client_reference' => $callbackData['clientreference'] ?? null,
            'telco_transaction_id' => $callbackData['telcotransid'] ?? null,
            'status' => $status,
            'redde_status' => $callbackData['status'] ?? null,
            'reason' => $callbackData['reason'] ?? null,
            'status_date' => $callbackData['statusdate'] ?? null,
            'callback_data' => $callbackData,
        ];
    }

    /**
     * Create payment request for subscription
     */
    public function createSubscriptionPayment(array $data): array
    {
        // Validate required fields
        $required = ['amount', 'phone_number', 'payment_option'];
        foreach ($required as $field) {
            if (empty($data[$field])) {
                throw new Exception("Field {$field} is required");
            }
        }

        // Validate payment option
        $validOptions = array_keys($this->getPaymentOptions());
        if (!in_array(strtoupper($data['payment_option']), $validOptions)) {
            throw new Exception("Invalid payment option. Supported options: " . implode(', ', $validOptions));
        }

        // Validate and format phone number
        if (!$this->validatePhoneNumber($data['phone_number'])) {
            throw new Exception("Invalid phone number format");
        }

        $formattedPhone = $this->formatPhoneNumber($data['phone_number']);

        // Prepare payment data
        $paymentData = [
            'amount' => $data['amount'],
            'vouchercode' => $data['voucher_code'],
            'phone_number' => $formattedPhone,
            'payment_option' => strtoupper($data['payment_option']),
            'description' => $data['description'] ?? 'Subscription payment',
            'reference' => $data['reference'] ?? null,
            'client_transaction_id' => $data['client_transaction_id'] ?? null,
        ];
        return $this->receive($paymentData);
    }

    /**
     * Create refund request
     */
    public function createRefund(array $data): array
    {
        // Validate required fields
        $required = ['amount', 'phone_number', 'payment_option'];
        foreach ($required as $field) {
            if (empty($data[$field])) {
                throw new Exception("Field {$field} is required");
            }
        }

        // Validate and format phone number
        if (!$this->validatePhoneNumber($data['phone_number'])) {
            throw new Exception("Invalid phone number format");
        }

        $formattedPhone = $this->formatPhoneNumber($data['phone_number']);

        // Prepare refund data
        $refundData = [
            'amount' => $data['amount'],
            'phone_number' => $formattedPhone,
            'payment_option' => strtoupper($data['payment_option']),
            'description' => $data['description'] ?? 'Payment refund',
            'reference' => $data['reference'] ?? null,
            'client_transaction_id' => $data['client_transaction_id'] ?? null,
        ];

        return $this->cashout($refundData);
    }
}
