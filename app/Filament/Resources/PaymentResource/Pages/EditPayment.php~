<?php

namespace App\Filament\Resources\PaymentResource\Pages;

use App\Filament\Resources\PaymentResource;
use App\Models\Payment;
use Filament\Actions;
use Filament\Resources\Pages\EditRecord;
use Filament\Notifications\Notification;
use Illuminate\Contracts\Support\Htmlable;

class EditPayment extends EditRecord
{
    protected static string $resource = PaymentResource::class;

    public function getTitle(): string|Htmlable
    {
        return 'Edit Payment: ' . $this->getRecord()->internal_reference;
    }

    public function getSubheading(): string|Htmlable|null
    {
        $payment = $this->getRecord();
        return "₵{$payment->amount} - {$payment->customer?->name}";
    }

    protected function getHeaderActions(): array
    {
        return [
            Actions\Action::make('payment_history')
                ->label('View History')
                ->icon('heroicon-o-clock')
                ->color('info')
                ->action(function () {
                    // Payment history logic would go here
                    Notification::make()
                        ->title('Payment History')
                        ->body('Payment change history is available in the activity log.')
                        ->info()
                        ->send();
                }),
            
            Actions\ViewAction::make()
                ->color('info'),
            
            Actions\DeleteAction::make()
                ->requiresConfirmation()
                ->modalHeading('Delete Payment')
                ->modalDescription('This will permanently delete the payment record. This action cannot be undone.')
                ->before(function () {
                    $payment = $this->getRecord();
                    
                    // Prevent deletion of completed payments with active subscriptions
                    if ($payment->isCompleted() && $payment->subscription?->isActive()) {
                        Notification::make()
                            ->title('Cannot delete payment')
                            ->body('Cannot delete completed payments with active subscriptions.')
                            ->danger()
                            ->send();
                        
                        $this->halt();
                    }
                }),
        ];
    }

    protected function handleRecordUpdate(\Illuminate\Database\Eloquent\Model $record, array $data): \Illuminate\Database\Eloquent\Model
    {
        $originalStatus = $record->status;
        $originalAmount = $record->amount;
        
        // Update the record
        $record->update($data);
        
        // Handle status changes
        $this->handleStatusChange($record, $originalStatus);
        
        // Handle amount changes
        if ($originalAmount != $data['amount']) {
            $this->handleAmountChange($record, $originalAmount, $data['amount']);
        }
        
        return $record;
    }

    protected function handleStatusChange(Payment $payment, string $originalStatus): void
    {
        $newStatus = $payment->status;
        
        if ($originalStatus === $newStatus) {
            return;
        }

        // Log status change
        activity()
            ->performedOn($payment)
            ->causedBy(auth()->user())
            ->log("Payment status changed from {$originalStatus} to {$newStatus}");

        // Handle specific status changes
        switch ($newStatus) {
            case 'completed':
                if ($payment->subscription && !$payment->subscription->isActive()) {
                    try {
                        $payment->subscription->activate();
                        
                        Notification::make()
                            ->title('Subscription activated')
                            ->body('The associated subscription has been activated due to payment completion.')
                            ->success()
                            ->send();
                            
                    } catch (\Exception $e) {
                        Notification::make()
                            ->title('Subscription activation failed')
                            ->body($e->getMessage())
                            ->warning()
                            ->send();
                    }
                }
                break;

            case 'failed':
            case 'cancelled':
                if ($payment->subscription && $payment->subscription->isPending()) {
                    $payment->subscription->update(['status' => 'cancelled']);
                    
                    Notification::make()
                        ->title('Subscription cancelled')
                        ->body('The associated subscription has been cancelled due to payment failure.')
                        ->info()
                        ->send();
                }
                break;
        }
    }

    protected function handleAmountChange(Payment $payment, float $originalAmount, float $newAmount): void
    {
        if ($payment->isCompleted()) {
            Notification::make()
                ->title('Amount changed for completed payment')
                ->body("Payment amount changed from ₵{$originalAmount} to ₵{$newAmount}. This may affect subscription pricing.")
                ->warning()
                ->send();
        }

        // Log amount change
        activity()
            ->performedOn($payment)
            ->causedBy(auth()->user())
            ->log("Payment amount changed from ₵{$originalAmount} to ₵{$newAmount}");
    }

    protected function getRedirectUrl(): string
    {
        return $this->getResource()::getUrl('view', ['record' => $this->getRecord()]);
    }

    protected function getSavedNotification(): ?Notification
    {
        return Notification::make()
            ->success()
            ->title('Payment updated')
            ->body('The payment has been updated successfully.');
    }

    protected function mutateFormDataBeforeSave(array $data): array
    {
        // Validate mobile money fields
        if ($data['payment_method'] === 'mobile_money') {
            if (empty($data['mobile_money_provider'])) {
                throw new \Exception('Mobile money provider is required for mobile money payments.');
            }
            
            if (empty($data['mobile_number'])) {
                throw new \Exception('Mobile number is required for mobile money payments.');
            }
        }

        // Format mobile number
        if (!empty($data['mobile_number'])) {
            $data['mobile_number'] = $this->formatMobileNumber($data['mobile_number']);
        }

        // Set payment date to now if status changed to completed and no date set
        if ($data['status'] === 'completed' && empty($data['payment_date'])) {
            $data['payment_date'] = now();
        }

        // Clear mobile money fields if payment method is not mobile money
        if ($data['payment_method'] !== 'mobile_money') {
            $data['mobile_money_provider'] = null;
            $data['mobile_number'] = null;
        }

        // Clear failure reason if status is not failed/cancelled
        if (!in_array($data['status'], ['failed', 'cancelled'])) {
            $data['failure_reason'] = null;
        }

        return $data;
    }

    protected function formatMobileNumber(string $number): string
    {
        // Remove any non-numeric characters
        $number = preg_replace('/[^0-9]/', '', $number);
        
        // If it starts with 0, keep it as is (local format)
        if (str_starts_with($number, '0') && strlen($number) === 10) {
            return $number;
        }
        
        // If it starts with 233, format as international
        if (str_starts_with($number, '233') && strlen($number) === 12) {
            return '+' . $number;
        }
        
        // If it's 9 digits, add leading 0
        if (strlen($number) === 9) {
            return '0' . $number;
        }
        
        return $number; // Return as is if we can't format it
    }
}