<?php

namespace App\Filament\Resources\SubscriptionResource\Pages;

use App\Filament\Resources\SubscriptionResource;
use App\Models\Package;
use Filament\Actions;
use Filament\Resources\Pages\ViewRecord;
use Filament\Notifications\Notification;
use Filament\Infolists;
use Filament\Infolists\Infolist;

class ViewSubscription extends ViewRecord
{
    protected static string $resource = SubscriptionResource::class;

    protected function getHeaderActions(): array
    {
        return [
            Actions\EditAction::make(),

            Actions\Action::make('activate')
                ->label('Activate')
                ->icon('heroicon-o-play')
                ->color('success')
                ->requiresConfirmation()
                ->action(function () {
                    $this->record->activate();
                    Notification::make()
                        ->title('Subscription Activated')
                        ->success()
                        ->send();
                })
                ->visible(fn (): bool => in_array($this->record->status, ['pending', 'suspended'])),

            Actions\Action::make('suspend')
                ->label('Suspend')
                ->icon('heroicon-o-pause')
                ->color('warning')
                ->form([
                    \Filament\Forms\Components\Textarea::make('reason')
                        ->label('Suspension Reason')
                        ->required()
                        ->placeholder('Please provide a reason for suspension...'),
                ])
                ->requiresConfirmation()
                ->action(function (array $data) {
                    $this->record->suspend($data['reason']);
                    Notification::make()
                        ->title('Subscription Suspended')
                        ->warning()
                        ->send();
                })
                ->visible(fn (): bool => $this->record->status === 'active'),

            Actions\Action::make('resume')
                ->label('Resume')
                ->icon('heroicon-o-play')
                ->color('success')
                ->requiresConfirmation()
                ->action(function () {
                    $this->record->resume();
                    Notification::make()
                        ->title('Subscription Resumed')
                        ->success()
                        ->send();
                })
                ->visible(fn (): bool => $this->record->status === 'suspended'),

            Actions\Action::make('block')
                ->label('Block')
                ->icon('heroicon-o-no-symbol')
                ->color('danger')
                ->form([
                    \Filament\Forms\Components\Textarea::make('reason')
                        ->label('Block Reason')
                        ->required()
                        ->placeholder('Please provide a reason for blocking...'),
                ])
                ->requiresConfirmation()
                ->action(function (array $data) {
                    $this->record->block($data['reason']);
                    Notification::make()
                        ->title('Subscription Blocked')
                        ->danger()
                        ->send();
                })
                ->visible(fn (): bool => !in_array($this->record->status, ['blocked', 'expired'])),

            Actions\Action::make('unblock')
                ->label('Unblock')
                ->icon('heroicon-o-check-circle')
                ->color('success')
                ->requiresConfirmation()
                ->action(function () {
                    $this->record->unblock();
                    Notification::make()
                        ->title('Subscription Unblocked')
                        ->success()
                        ->send();
                })
                ->visible(fn (): bool => $this->record->status === 'blocked'),

            Actions\Action::make('renew')
                ->label('Renew')
                ->icon('heroicon-o-arrow-path')
                ->color('primary')
                ->form([
                    \Filament\Forms\Components\Select::make('package_id')
                        ->label('Renewal Package')
                        ->options(Package::active()->pluck('name', 'id'))
                        ->searchable()
                        ->default($this->record->renewal_package_id ?? $this->record->package_id)
                        ->required(),
                    
                    \Filament\Forms\Components\DateTimePicker::make('new_expiry')
                        ->label('New Expiry Date')
                        ->default(function () {
                            $package = $this->record->package;
                            return match($package->duration_type) {
                                'hourly' => $this->record->expires_at->addHours($package->duration_value),
                                'daily' => $this->record->expires_at->addDays($package->duration_value),
                                'weekly' => $this->record->expires_at->addWeeks($package->duration_value),
                                'monthly' => $this->record->expires_at->addMonths($package->duration_value),
                                default => $this->record->expires_at->addDays(1)
                            };
                        })
                        ->required(),
                ])
                ->requiresConfirmation()
                ->action(function (array $data) {
                    $newPackage = Package::find($data['package_id']);
                    $this->record->update([
                        'package_id' => $newPackage->id,
                        'expires_at' => $data['new_expiry'],
                        'status' => 'active'
                    ]);
                    $this->record->updateRadiusUser();
                    $this->record->syncRadiusStatus();
                    
                    Notification::make()
                        ->title('Subscription Renewed')
                        ->success()
                        ->send();
                })
                ->visible(fn (): bool => $this->record->canRenew()),

            Actions\Action::make('disconnect_sessions')
                ->label('Disconnect All Sessions')
                ->icon('heroicon-o-x-circle')
                ->color('danger')
                ->form([
                    \Filament\Forms\Components\Textarea::make('reason')
                        ->label('Disconnection Reason')
                        ->default('Admin Disconnect')
                        ->required(),
                ])
                ->requiresConfirmation()
                ->action(function (array $data) {
                    $result = $this->record->disconnectAllSessions($data['reason']);
                    Notification::make()
                        ->title($result['message'])
                        ->color($result['success'] ? 'success' : 'warning')
                        ->send();
                })
                ->visible(fn (): bool => $this->record->getCurrentSessionCount() > 0),

            Actions\Action::make('sync_data_usage')
                ->label('Sync Data Usage')
                ->icon('heroicon-o-arrow-path')
                ->color('info')
                ->requiresConfirmation()
                ->action(function () {
                    $oldUsage = $this->record->data_used;
                    $this->record->updateDataUsageFromRadius();
                    $newUsage = $this->record->fresh()->data_used;
                    
                    Notification::make()
                        ->title('Data Usage Synced')
                        ->body("Updated from {$oldUsage} MB to {$newUsage} MB")
                        ->success()
                        ->send();
                }),

            Actions\Action::make('view_session_history')
                ->label('Session History')
                ->icon('heroicon-o-clock')
                ->color('gray')
                ->url(fn () => route('filament.admin.resources.subscriptions.sessions', ['record' => $this->record]))
                ->openUrlInNewTab(),

            Actions\Action::make('generate_report')
                ->label('Generate Report')
                ->icon('heroicon-o-document-chart-bar')
                ->color('info')
                ->form([
                    \Filament\Forms\Components\Select::make('report_type')
                        ->label('Report Type')
                        ->options([
                            'usage' => 'Usage Report',
                            'sessions' => 'Session Report',
                            'billing' => 'Billing Report',
                        ])
                        ->required(),
                    
                    \Filament\Forms\Components\DatePicker::make('from_date')
                        ->label('From Date')
                        ->default(now()->subMonth())
                        ->required(),
                    
                    \Filament\Forms\Components\DatePicker::make('to_date')
                        ->label('To Date')
                        ->default(now())
                        ->required(),
                ])
                ->action(function (array $data) {
                    // Generate and download report
                    $reportData = $this->generateSubscriptionReport($data);
                    
                    Notification::make()
                        ->title('Report Generated')
                        ->body('Report has been generated and will be downloaded shortly.')
                        ->success()
                        ->send();
                }),

            Actions\DeleteAction::make()
                ->before(function () {
                    // Clean up RADIUS entries before deletion
                    try {
                        $this->record->deleteRadiusUser();
                    } catch (\Exception $e) {
                        \Log::error('Failed to cleanup RADIUS user during subscription deletion: ' . $e->getMessage());
                    }
                }),
        ];
    }

    public function infolist(Infolist $infolist): Infolist
    {
        return $infolist
            ->schema([
                Infolists\Components\Section::make('Customer Information')
                    ->schema([
                        Infolists\Components\TextEntry::make('customer.name')
                            ->label('Customer Name'),
                        Infolists\Components\TextEntry::make('customer.phone')
                            ->label('Phone')
                            ->copyable(),
                        Infolists\Components\TextEntry::make('customer.email')
                            ->label('Email')
                            ->copyable(),
                        Infolists\Components\TextEntry::make('username')
                            ->label('Username')
                            ->copyable()
                            ->badge(),
                        Infolists\Components\TextEntry::make('customer.address')
                            ->label('Address')
                            ->columnSpanFull(),
                    ])
                    ->columns(2),

                Infolists\Components\Section::make('Subscription Status')
                    ->schema([
                        Infolists\Components\TextEntry::make('status')
                            ->badge()
                            ->color(fn (string $state): string => match ($state) {
                                'active' => 'success',
                                'pending' => 'warning',
                                'suspended' => 'danger',
                                'expired' => 'gray',
                                'blocked' => 'danger',
                                default => 'gray',
                            }),
                        Infolists\Components\TextEntry::make('time_remaining')
                            ->label('Time Remaining')
                            ->badge()
                            ->color(fn (): string => match (true) {
                                $this->record->isExpired() => 'danger',
                                $this->record->days_until_expiry <= 1 => 'warning',
                                $this->record->days_until_expiry <= 7 => 'info',
                                default => 'success',
                            }),
                        Infolists\Components\TextEntry::make('active_sessions_count')
                            ->label('Active Sessions')
                            ->getStateUsing(fn (): int => $this->record->getCurrentSessionCount())
                            ->badge()
                            ->color('info'),
                        Infolists\Components\IconEntry::make('can_access_internet')
                            ->label('Internet Access')
                            ->getStateUsing(fn (): bool => $this->record->canAccessInternet())
                            ->boolean()
                            ->trueIcon('heroicon-o-check-circle')
                            ->falseIcon('heroicon-o-x-circle')
                            ->trueColor('success')
                            ->falseColor('danger'),
                    ])
                    ->columns(2),

                Infolists\Components\Section::make('Package Information')
                    ->schema([
                        Infolists\Components\TextEntry::make('package.name')
                            ->label('Package Name')
                            ->badge(),
                        Infolists\Components\TextEntry::make('package.duration_display')
                            ->label('Duration'),
                        Infolists\Components\TextEntry::make('package.bandwidth_display')
                            ->label('Bandwidth'),
                        Infolists\Components\TextEntry::make('package.data_limit_display')
                            ->label('Data Limit'),
                        Infolists\Components\TextEntry::make('package.price')
                            ->label('Price')
                            ->money('GHS'),
                        Infolists\Components\TextEntry::make('package.simultaneous_users')
                            ->label('Simultaneous Users'),
                    ])
                    ->columns(3),

                Infolists\Components\Section::make('Subscription Dates')
                    ->schema([
                        Infolists\Components\TextEntry::make('starts_at')
                            ->label('Start Date')
                            ->dateTime(),
                        Infolists\Components\TextEntry::make('expires_at')
                            ->label('Expiry Date')
                            ->dateTime(),
                        Infolists\Components\TextEntry::make('created_at')
                            ->label('Created')
                            ->dateTime(),
                        Infolists\Components\TextEntry::make('updated_at')
                            ->label('Last Updated')
                            ->dateTime(),
                    ])
                    ->columns(2),

                Infolists\Components\Section::make('Usage Statistics')
                    ->schema([
                        Infolists\Components\TextEntry::make('data_used')
                            ->label('Data Used')
                            ->suffix(' MB')
                            ->color(fn (): string => $this->record->hasDataLimitExceeded() ? 'danger' : 'success'),
                        Infolists\Components\TextEntry::make('data_usage_percentage')
                            ->label('Data Usage %')
                            ->suffix('%')
                            ->color(fn (): string => match (true) {
                                $this->record->data_usage_percentage >= 100 => 'danger',
                                $this->record->data_usage_percentage >= 80 => 'warning',
                                default => 'success',
                            }),
                        Infolists\Components\TextEntry::make('remaining_data')
                            ->label('Remaining Data')
                            ->badge()
                            ->color(fn (): string => match (true) {
                                $this->record->hasDataLimitExceeded() => 'danger',
                                $this->record->data_usage_percentage >= 80 => 'warning',
                                default => 'success',
                            }),
                        Infolists\Components\TextEntry::make('sessions_used')
                            ->label('Sessions Used'),
                    ])
                    ->columns(2),

                Infolists\Components\Section::make('Auto Renewal Settings')
                    ->schema([
                        Infolists\Components\IconEntry::make('auto_renew')
                            ->label('Auto Renew Enabled')
                            ->boolean(),
                        Infolists\Components\TextEntry::make('renewal_package.name')
                            ->label('Renewal Package')
                            ->placeholder('Same package')
                            ->badge(),
                    ])
                    ->columns(2)
                    ->collapsible(),

                Infolists\Components\Section::make('Trial Information')
                    ->schema([
                        Infolists\Components\IconEntry::make('is_trial')
                            ->label('Trial Subscription')
                            ->boolean(),
                        Infolists\Components\TextEntry::make('package.trial_duration_hours')
                            ->label('Trial Duration')
                            ->suffix(' hours')
                            ->visible(fn (): bool => $this->record->is_trial),
                    ])
                    ->columns(2)
                    ->visible(fn (): bool => $this->record->is_trial)
                    ->collapsible(),

                Infolists\Components\Section::make('Notes')
                    ->schema([
                        Infolists\Components\TextEntry::make('notes')
                            ->prose()
                            ->placeholder('No notes available')
                            ->columnSpanFull(),
                    ])
                    ->collapsible(),

                Infolists\Components\Section::make('Recent Session Statistics')
                    ->schema([
                        Infolists\Components\TextEntry::make('today_usage')
                            ->label("Today's Usage")
                            ->getStateUsing(function (): string {
                                $usage = $this->record->getTodaysUsage();
                                return "{$usage['total_mb']} MB ({$usage['sessions']} sessions)";
                            }),
                        Infolists\Components\TextEntry::make('session_stats')
                            ->label('30-Day Statistics')
                            ->getStateUsing(function (): string {
                                $stats = $this->record->getSessionStatistics(30);
                                return "{$stats['total_sessions']} sessions, {$stats['total_data_gb']} GB";
                            }),
                    ])
                    ->columns(2)
                    ->collapsible(),
            ]);
    }

    protected function generateSubscriptionReport(array $data): array
    {
        // Implementation for generating different types of reports
        $reportType = $data['report_type'];
        $fromDate = $data['from_date'];
        $toDate = $data['to_date'];

        switch ($reportType) {
            case 'usage':
                return $this->generateUsageReport($fromDate, $toDate);
            case 'sessions':
                return $this->generateSessionsReport($fromDate, $toDate);
            case 'billing':
                return $this->generateBillingReport($fromDate, $toDate);
            default:
                return [];
        }
    }

    protected function generateUsageReport($fromDate, $toDate): array
    {
        // Generate usage report data
        return [
            'type' => 'usage',
            'period' => ['from' => $fromDate, 'to' => $toDate],
            'data' => [
                'total_data_used' => $this->record->data_used,
                'daily_usage' => [], // Daily breakdown
                'peak_usage_day' => null,
            ]
        ];
    }

    protected function generateSessionsReport($fromDate, $toDate): array
    {
        // Generate sessions report data
        $sessions = $this->record->getSessionHistory(100, now()->diffInDays($fromDate));
        
        return [
            'type' => 'sessions',
            'period' => ['from' => $fromDate, 'to' => $toDate],
            'data' => [
                'total_sessions' => $sessions->count(),
                'sessions' => $sessions->toArray(),
            ]
        ];
    }

    protected function generateBillingReport($fromDate, $toDate): array
    {
        // Generate billing report data
        $payments = $this->record->payments()
            ->whereBetween('created_at', [$fromDate, $toDate])
            ->get();

        return [
            'type' => 'billing',
            'period' => ['from' => $fromDate, 'to' => $toDate],
            'data' => [
                'total_payments' => $payments->sum('amount'),
                'payment_count' => $payments->count(),
                'payments' => $payments->toArray(),
            ]
        ];
    }
}