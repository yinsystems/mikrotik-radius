<?php

namespace App\Filament\Resources\CustomerResource\Pages;

use App\Filament\Resources\CustomerResource;
use App\Models\Customer;
use App\Models\Package;
use Filament\Actions;
use Filament\Resources\Pages\ViewRecord;
use Filament\Forms;
use Filament\Infolists;
use Filament\Infolists\Infolist;
use Filament\Support\Enums\FontWeight;
use Filament\Support\Colors\Color;
use Filament\Notifications\Notification;

class ViewCustomer extends ViewRecord
{
    protected static string $resource = CustomerResource::class;

    protected function getHeaderActions(): array
    {
        return [
            Actions\EditAction::make()
                ->icon('heroicon-o-pencil-square'),

            Actions\ActionGroup::make([
                Actions\Action::make('available_upgrades')
                    ->label('Available Upgrades')
                    ->icon('heroicon-o-arrow-up-circle')
                    ->color('primary')
                    ->action(function (Customer $record) {
                        $upgrades = $record->getAvailablePackagesForUpgrade();

                        if ($upgrades->isEmpty()) {
                            Notification::make()
                                ->title('No Upgrades Available')
                                ->body('No package upgrades are currently available for this customer.')
                                ->info()
                                ->send();
                        } else {
                            Notification::make()
                                ->title('Upgrades Available')
                                ->body("{$upgrades->count()} package upgrades are available.")
                                ->success()
                                ->send();
                        }
                    }),

                Actions\Action::make('send_notification')
                    ->label('Send Notification')
                    ->icon('heroicon-o-bell')
                    ->color('purple')
                    ->form([
                        Forms\Components\Select::make('type')
                            ->label('Notification Type')
                            ->options([
                                'reminder' => 'Payment Reminder',
                                'expiry' => 'Subscription Expiry Warning',
                                'promotion' => 'Promotional Offer',
                                'maintenance' => 'Maintenance Notice',
                                'custom' => 'Custom Message',
                            ])
                            ->required()
                            ->native(false),

                        Forms\Components\Select::make('method')
                            ->label('Send Via')
                            ->options([
                                'email' => 'Email',
                                'sms' => 'SMS',
                                'both' => 'Both Email & SMS',
                            ])
                            ->required()
                            ->default('email')
                            ->native(false),

                        Forms\Components\TextInput::make('subject')
                            ->label('Subject')
                            ->required()
                            ->maxLength(255),

                        Forms\Components\Textarea::make('message')
                            ->label('Message')
                            ->required()
                            ->rows(5)
                            ->columnSpanFull(),
                    ])
                    ->action(function (Customer $record, array $data) {
                        // Here you would implement sending notifications
                        Notification::make()
                            ->title('Notification Sent')
                            ->body("Notification sent to {$record->name} via {$data['method']}.")
                            ->success()
                            ->send();
                    }),
            ])
            ->label('Customer Actions')
            ->icon('heroicon-o-ellipsis-horizontal')
            ->button()
            ->color('gray'),
        ];
    }

    public function infolist(Infolist $infolist): Infolist
    {
        return $infolist
            ->schema([
                Infolists\Components\Section::make('Customer Overview')
                    ->icon('heroicon-o-user')
                    ->schema([
                        Infolists\Components\Grid::make(3)
                            ->schema([
                                Infolists\Components\Group::make([
                                    Infolists\Components\TextEntry::make('name')
                                        ->icon('heroicon-o-user')
                                        ->weight(FontWeight::Bold)
                                        ->size(Infolists\Components\TextEntry\TextEntrySize::Large),

                                    Infolists\Components\TextEntry::make('status')
                                        ->badge()
                                        ->color(fn (string $state): string => match ($state) {
                                            'active' => 'success',
                                            'suspended' => 'warning',
                                            'blocked' => 'danger',
                                            default => 'gray',
                                        }),
                                ]),

                                Infolists\Components\Group::make([
                                    Infolists\Components\TextEntry::make('phone')
                                        ->icon('heroicon-o-phone')
                                        ->copyable(),

                                    Infolists\Components\TextEntry::make('email')
                                        ->icon('heroicon-o-envelope')
                                        ->copyable()
                                        ->placeholder('No email'),
                                ]),

                                Infolists\Components\Group::make([
                                    Infolists\Components\TextEntry::make('username')
                                        ->icon('heroicon-o-user-circle')
                                        ->copyable()
                                        ->placeholder('Phone as username'),

                                    Infolists\Components\TextEntry::make('registration_date')
                                        ->label('Registered')
                                        ->dateTime()
                                        ->icon('heroicon-o-calendar'),
                                ]),
                            ]),
                    ]),

                Infolists\Components\Section::make('Current Subscription')
                    ->icon('heroicon-o-cube')
                    ->schema([
                        Infolists\Components\Grid::make(2)
                            ->schema([
                                Infolists\Components\Group::make([
                                    Infolists\Components\TextEntry::make('activeSubscription.package.name')
                                        ->label('Package')
                                        ->weight(FontWeight::SemiBold)
                                        ->placeholder('No active subscription'),

                                    Infolists\Components\TextEntry::make('activeSubscription.status')
                                        ->label('Status')
                                        ->badge()
                                        ->color(fn (?string $state): string => match ($state) {
                                            'active' => 'success',
                                            'pending' => 'warning',
                                            'suspended' => 'danger',
                                            'expired' => 'gray',
                                            default => 'gray',
                                        })
                                        ->placeholder('No active subscription'),

                                    Infolists\Components\TextEntry::make('activeSubscription.starts_at')
                                        ->label('Started')
                                        ->dateTime()
                                        ->placeholder('No active subscription'),

                                    Infolists\Components\TextEntry::make('activeSubscription.expires_at')
                                        ->label('Expires')
                                        ->dateTime()
                                        ->color(function ($record) {
                                            if (!$record->activeSubscription) return 'gray';
                                            $hoursLeft = $record->activeSubscription->expires_at->diffInHours(now());
                                            return match (true) {
                                                $hoursLeft <= 24 => 'danger',
                                                $hoursLeft <= 72 => 'warning',
                                                default => 'success'
                                            };
                                        })
                                        ->placeholder('No active subscription'),
                                ]),

                                Infolists\Components\Group::make([
                                    Infolists\Components\TextEntry::make('activeSubscription.package.data_limit')
                                        ->label('Data Limit')
                                        ->getStateUsing(fn ($record) =>
                                            $record->activeSubscription?->package?->data_limit
                                            ? number_format($record->activeSubscription->package->data_limit) . ' MB'
                                            : 'Unlimited'
                                        )
                                        ->placeholder('No active subscription'),

                                    Infolists\Components\TextEntry::make('activeSubscription.package.bandwidth_download')
                                        ->label('Download Speed')
                                        ->getStateUsing(fn ($record) =>
                                            $record->activeSubscription?->package?->bandwidth_download
                                            ? number_format($record->activeSubscription->package->bandwidth_download / 1000000, 1) . ' Mbps'
                                            : 'No limit'
                                        )
                                        ->placeholder('No active subscription'),

                                    Infolists\Components\TextEntry::make('activeSubscription.package.bandwidth_upload')
                                        ->label('Upload Speed')
                                        ->getStateUsing(fn ($record) =>
                                            $record->activeSubscription?->package?->bandwidth_upload
                                            ? number_format($record->activeSubscription->package->bandwidth_upload / 1000000, 1) . ' Mbps'
                                            : 'No limit'
                                        )
                                        ->placeholder('No active subscription'),

                                    Infolists\Components\TextEntry::make('days_remaining')
                                        ->label('Days Remaining')
                                        ->getStateUsing(fn ($record) =>
                                            $record->activeSubscription
                                            ? max(0, $record->activeSubscription->expires_at->diffInDays(now())) . ' days'
                                            : 'No active subscription'
                                        )
                                        ->color(function ($record) {
                                            if (!$record->activeSubscription) return 'gray';
                                            $daysLeft = $record->activeSubscription->expires_at->diffInDays(now());
                                            return match (true) {
                                                $daysLeft <= 1 => 'danger',
                                                $daysLeft <= 3 => 'warning',
                                                default => 'success'
                                            };
                                        }),
                                ]),
                            ]),
                    ])
                    ->visible(fn ($record) => $record->activeSubscription),

                Infolists\Components\Section::make('Usage Statistics')
                    ->icon('heroicon-o-chart-bar')
                    ->schema([
                        Infolists\Components\Grid::make(3)
                            ->schema([
                                Infolists\Components\TextEntry::make('data_used_today')
                                    ->label("Today's Usage")
                                    ->getStateUsing(function ($record) {
                                        $stats = $record->getCurrentUsageStats();
                                        return $stats['has_active_subscription']
                                            ? number_format($stats['today']['data_used_mb'], 2) . ' MB'
                                            : 'No data';
                                    })
                                    ->icon('heroicon-o-calendar-days'),

                                Infolists\Components\TextEntry::make('sessions_today')
                                    ->label("Today's Sessions")
                                    ->getStateUsing(function ($record) {
                                        $stats = $record->getCurrentUsageStats();
                                        return $stats['has_active_subscription']
                                            ? $stats['today']['sessions'] . ' sessions'
                                            : 'No data';
                                    })
                                    ->icon('heroicon-o-clock'),

                                Infolists\Components\TextEntry::make('time_spent_today')
                                    ->label("Today's Duration")
                                    ->getStateUsing(function ($record) {
                                        $stats = $record->getCurrentUsageStats();
                                        return $stats['has_active_subscription']
                                            ? $stats['today']['time_spent']
                                            : 'No data';
                                    })
                                    ->icon('heroicon-o-play-circle'),

                                Infolists\Components\TextEntry::make('monthly_data')
                                    ->label('Monthly Data (GB)')
                                    ->getStateUsing(function ($record) {
                                        $stats = $record->getCurrentUsageStats();
                                        return $stats['has_active_subscription']
                                            ? number_format($stats['monthly_stats']['total_data_gb'], 2) . ' GB'
                                            : 'No data';
                                    })
                                    ->icon('heroicon-o-signal'),

                                Infolists\Components\TextEntry::make('monthly_sessions')
                                    ->label('Monthly Sessions')
                                    ->getStateUsing(function ($record) {
                                        $stats = $record->getCurrentUsageStats();
                                        return $stats['has_active_subscription']
                                            ? $stats['monthly_stats']['total_sessions'] . ' sessions'
                                            : 'No data';
                                    })
                                    ->icon('heroicon-o-rectangle-stack'),

                                Infolists\Components\TextEntry::make('usage_percentage')
                                    ->label('Data Limit Usage')
                                    ->getStateUsing(function ($record) {
                                        $stats = $record->getCurrentUsageStats();
                                        if (!$stats['has_active_subscription']) return 'No data';

                                        $percentage = $stats['data_limits']['usage_percentage'];
                                        return $percentage . '%';
                                    })
                                    ->color(function ($record) {
                                        $stats = $record->getCurrentUsageStats();
                                        if (!$stats['has_active_subscription']) return 'gray';

                                        $percentage = $stats['data_limits']['usage_percentage'];
                                        return match (true) {
                                            $percentage >= 90 => 'danger',
                                            $percentage >= 80 => 'warning',
                                            default => 'success'
                                        };
                                    })
                                    ->icon('heroicon-o-chart-pie'),
                            ]),
                    ])
                    ->visible(fn ($record) => $record->activeSubscription),

                Infolists\Components\Section::make('Financial Summary')
                    ->icon('heroicon-o-banknotes')
                    ->schema([
                        Infolists\Components\Grid::make(4)
                            ->schema([
                                Infolists\Components\TextEntry::make('total_spent')
                                    ->label('Total Spent')
                                    ->money('GHS')
                                    ->getStateUsing(fn ($record) => $record->getTotalSpent())
                                    ->color('success')
                                    ->icon('heroicon-o-banknotes'),

                                Infolists\Components\TextEntry::make('total_refunds')
                                    ->label('Total Refunds')
                                    ->money('GHS')
                                    ->getStateUsing(fn ($record) => $record->getTotalRefunds())
                                    ->color('warning')
                                    ->icon('heroicon-o-arrow-uturn-left'),

                                Infolists\Components\TextEntry::make('net_spent')
                                    ->label('Net Spent')
                                    ->money('GHS')
                                    ->getStateUsing(fn ($record) => $record->getNetSpent())
                                    ->color('primary')
                                    ->icon('heroicon-o-calculator'),

                                Infolists\Components\TextEntry::make('payment_count')
                                    ->label('Total Payments')
                                    ->getStateUsing(fn ($record) => $record->payments()->where('status', 'completed')->count())
                                    ->icon('heroicon-o-credit-card'),
                            ]),
                    ]),

                Infolists\Components\Section::make('Account Statistics')
                    ->icon('heroicon-o-chart-pie')
                    ->schema([
                        Infolists\Components\Grid::make(4)
                            ->schema([
                                Infolists\Components\TextEntry::make('subscription_count')
                                    ->label('Total Subscriptions')
                                    ->getStateUsing(fn ($record) => $record->subscriptions()->count())
                                    ->icon('heroicon-o-rectangle-stack'),

                                Infolists\Components\TextEntry::make('active_subscription_count')
                                    ->label('Active Subscriptions')
                                    ->getStateUsing(fn ($record) => $record->activeSubscriptions()->count())
                                    ->color('success')
                                    ->icon('heroicon-o-check-circle'),

                                Infolists\Components\TextEntry::make('last_login')
                                    ->dateTime()
                                    ->placeholder('Never logged in')
                                    ->icon('heroicon-o-clock'),

                                Infolists\Components\TextEntry::make('customer_since')
                                    ->label('Customer Since')
                                    ->getStateUsing(fn ($record) => $record->registration_date->diffForHumans())
                                    ->icon('heroicon-o-calendar'),
                            ]),
                    ]),

                Infolists\Components\Section::make('Administrative Notes')
                    ->icon('heroicon-o-document-text')
                    ->schema([
                        Infolists\Components\TextEntry::make('notes')
                            ->placeholder('No notes')
                            ->prose()
                            ->columnSpanFull(),
                    ])
                    ->collapsible()
                    ->collapsed(),
            ]);
    }

    protected function getHeaderWidgets(): array
    {
        return [
            CustomerResource\Widgets\CustomerUsageWidget::class,
            CustomerResource\Widgets\CustomerSessionsWidget::class,
        ];
    }
}
